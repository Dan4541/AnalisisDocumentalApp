@page "/history"
@using AnalysisDocumentalApp.Models
@using AnalysisDocumentalApp.Services
@inject ILogService LogService
@using Microsoft.JSInterop
@inject IJSRuntime JS

<h3>Logs History</h3>

<div class="container mt-4">
    
    @if (logs == null)
    {
        <p>Loading Logs</p>
    }
    else
    {
        <div class="row my-5">
            <div class="col-md-8 mx-auto">

                <div class="d-grid d-md-flex mb-3 justify-content-md-end">
                    <button class="btn btn-success" @onclick="ExportToExcel">Export to Excel</button>
                </div>

                <div class="mb-3 row">
                    <label class="col-sm-2 col-form-label">Search Logs</label>
                    <div class="col-sm-10">
                        <input type="text" class="form-control" @bind="@filterText" @bind:event="oninput" placeholder="Search by description" />
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Filtrar por tipo</label>
                    <select class="form-select" @bind="@selectedType">
                        <option value="">All</option>
                        <option value="DocumentUpload">Document Upload</option>
                        <option value="AIProcessing">AI Processing</option>
                        <option value="UserInteraction">User Interaction</option>
                    </select>
                </div>

            </div>
        </div>

        <div class="col-md-8 mx-auto mb-5">
            <h4>Logs</h4>
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Type</th>
                        <th>Description</th>
                        <th>Date and Time</th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var log in filteredLogs)
                    {
                        <tr>
                            <td>@log.Id</td>
                            <td>@log.Type</td>
                            <td>@log.Description</td>
                            <td>@log.DateTime.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    }
</div>


@code {
    private List<LogEntry> logs = null;
    private string filterText = "";
    private string selectedType = "";

    private List<LogEntry> filteredLogs => logs?.Where(l =>
        (string.IsNullOrEmpty(filterText) || l.Description.Contains(filterText, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrEmpty(selectedType) || l.Type == ParseLogType(selectedType))).ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadLogs();
    }

    private async Task LoadLogs()
    {
        logs = (await LogService.GetLogEntriesAsync()).ToList();
    }

    
    private async Task ExportToExcel()
    {
        var excelBytes = await LogService.ExportToExcelAsync(filteredLogs);
        await JS.InvokeVoidAsync("saveAsFile", "log_export.xlsx", Convert.ToBase64String(excelBytes));
    }
    

    private LogType? ParseLogType(string type)
    {
        if (Enum.TryParse<LogType>(type, out var logType))
        {
            return logType;
        }
        return null;
    }

}
